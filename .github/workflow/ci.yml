name: CI Template

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      image_tag:
        required: true
        type: string
      environment:
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      GH_PAT:
        required: true
      ARGOCD_SERVER:
        required: true
      ARGO_PASSWORD:
        required: true

env:
  MAVEN_OPTS: -Xms256m -Xmx512m

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: maven
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-
      - name: Lint Code with Maven Checkstyle
        run: mvn checkstyle:check
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - name: Run Tests
        run: mvn test
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/

  docker_build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Set up Kaniko
        run: |
          mkdir -p /kaniko/.docker
          echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"username\":\"${{ secrets.DOCKER_USERNAME }}\",\"password\":\"${{ secrets.DOCKER_PASSWORD }}\"}}}" > /kaniko/.docker/config.json
      - name: Build and push Docker image
        run: |
          /kaniko/executor \
            --context "${{ github.workspace }}" \
            --dockerfile "${{ github.workspace }}/Dockerfile" \
            --destination "${{ inputs.image_name }}:${{ inputs.image_tag }}-${{ github.sha }}" \
            --destination "${{ inputs.image_name }}:${{ inputs.image_tag }}-latest"

  helm_update:
    runs-on: ubuntu-latest
    needs: docker_build
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git yq
      - name: Clone Helm charts repository
        run: git clone https://${{ secrets.GH_PAT }}@github.com/WAYA-MULTI-LINK/waya-helm-charts.git
      - name: Update values file
        run: |
          cd waya-helm-charts
          git checkout main
          git pull origin main
          FILE_PATH="./microservices/${{ github.event.repository.name }}/${{ inputs.environment }}-values.yaml"
          if [ -f "$FILE_PATH" ]; then
            yq e -i ".application.image.repository = \"${{ inputs.image_name }}:${{ inputs.image_tag }}-${{ github.sha }}\"" "$FILE_PATH"
            git config --global user.name "CI Bot"
            git config --global user.email "ci-bot@alerzo.com"
            git add "$FILE_PATH"
            git commit -m "Update Docker image tag to ${{ inputs.image_name }}:${{ inputs.image_tag }}-${{ github.sha }}"
            git push https://${{ secrets.GH_PAT }}@github.com/WAYA-MULTI-LINK/waya-helm-charts.git HEAD:main
          else
            echo "File does not exist: $FILE_PATH"
            exit 1
          fi

  argocd_sync:
    runs-on: ubuntu-latest
    needs: helm_update
    steps:
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/
      - name: Login to ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: admin
          ARGOCD_PASSWORD: ${{ secrets.ARGO_PASSWORD }}
        run: |
          argocd login "$ARGOCD_SERVER" \
            --username "$ARGOCD_USERNAME" \
            --password "$ARGOCD_PASSWORD" \
            --grpc-web --insecure
      - name: Sync application
        run: |
          TARGET_APP="${{ github.event.repository.name }}-${{ inputs.environment }}"
          argocd app sync "$TARGET_APP" \
            --server="${{ secrets.ARGOCD_SERVER }}" \
            --grpc-web --insecure