name: CI Pipeline

on:
  workflow_call:
    inputs:
      CI_ENVIRONMENT_NAME:
        required: true
        type: string

      RUNNER_LABEL:
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      ARGOCD_PASSWORD:
        required: true
      ARGOCD_SERVER:
        required: true
      WAYA_HELM_PAT:
        required: true

jobs:
  maven_build:
    runs-on: 
      - self-hosted
      - ${{ inputs.RUNNER_LABEL }}
    env:
      MAVEN_OPTS: "-Xmx2048m"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.9.5

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: |
          java -version
          mvn clean package -DskipTests

      - name: Store Maven build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: maven-build
          path: target/*.jar

  docker_build:
    runs-on: 
      - self-hosted
      - ${{ inputs.RUNNER_LABEL }}
    needs: [maven_build]
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      image_repo: ${{ steps.vars.outputs.image_repo }}
      slug: ${{ steps.vars.outputs.slug }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Download Maven build artifacts
        uses: actions/download-artifact@v4
        with:
          name: maven-build
          path: target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up build variables
        id: vars
        run: |
          REPO_NAME="${{ github.event.repository.name }}"
          BRANCH_NAME="${{ github.ref_name }}"
          FULL_IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/microservice"
          SHORT_SHA=$(git rev-parse --short HEAD)
          TAG="${REPO_NAME}-${BRANCH_NAME}-${SHORT_SHA}"

          REPO_SLUG=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
          
          # Extract service name by removing common prefixes
          # Try multiple possible prefix patterns to handle different repo naming formats
          if [[ $REPO_SLUG == waya-pay-chat-2* ]]; then
            # For repos like waya-pay-chat-2-0-auth-service
            REPO_SLUG=${REPO_SLUG#waya-pay-chat-2-0-}
          elif [[ $REPO_SLUG == wayapay-chat-2* ]]; then
            # For repos like wayapay-chat-2-0-auth-service
            REPO_SLUG=${REPO_SLUG#wayapay-chat-2-0-}
          elif [[ $REPO_SLUG == waya-* ]]; then
            # For other waya prefixed repos
            REPO_SLUG=${REPO_SLUG#waya-}
          fi

          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV
          echo "REPO_SLUG=${REPO_SLUG}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "FULL_IMAGE_NAME=${FULL_IMAGE_NAME}" >> $GITHUB_ENV
          echo "TAG=${TAG}" >> $GITHUB_ENV

          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "slug=${REPO_SLUG}" >> $GITHUB_OUTPUT 


      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.FULL_IMAGE_NAME }}:${{ env.TAG }} .
          docker push ${{ env.FULL_IMAGE_NAME }}:${{ env.TAG }}

  helm_update:
    runs-on: 
      - self-hosted
      - ${{ inputs.RUNNER_LABEL }}
    needs: docker_build
    env:
      CI_ENVIRONMENT_NAME: ${{ inputs.CI_ENVIRONMENT_NAME }}
      REPO_SLUG: ${{ needs.docker_build.outputs.slug }}
      TAG: ${{ needs.docker_build.outputs.tag }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      GITHUB_PAT: ${{ secrets.WAYA_HELM_PAT }}

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v3

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          yq --version || echo "yq installation failed"
          # Add fallback installation method if the first one fails
          if [ $? -ne 0 ]; then
            echo "Trying alternative installation method"
            sudo apt-get update && sudo apt-get install -y yq
            yq --version || echo "Alternative installation also failed"
          fi

      - name: Clone waya-helm-charts repo and update values
        run: |
          git clone https://kayodewaya:${GITHUB_PAT}@github.com/WAYA-MULTI-LINK/waya-helm-charts.git
          cd waya-helm-charts

          FULL_IMAGE_WITH_TAG="${DOCKER_USERNAME}/microservice:${TAG}"
          
          # Debug information
          echo "========== DEBUG INFORMATION =========="
          echo "REPO_SLUG from docker_build job: ${REPO_SLUG}"
          echo "CI_ENVIRONMENT_NAME: ${CI_ENVIRONMENT_NAME}"
          echo "TAG from docker_build job: ${TAG}"
          
          FILE_PATH="./helm/wayabank-microservices/${REPO_SLUG}/${CI_ENVIRONMENT_NAME}-values.yaml"
          echo "Final FILE_PATH: ${FILE_PATH}"
          echo "Updating $FILE_PATH with new image.repository: ${FULL_IMAGE_WITH_TAG}"
          echo "======================================="

          if [ -z "${FULL_IMAGE_WITH_TAG}" ]; then
            echo "FULL_IMAGE_WITH_TAG is empty. Failing the job."
            exit 1
          fi

          if [ ! -s "$FILE_PATH" ]; then
            echo "YAML file not found or is empty: $FILE_PATH"
            exit 1
          fi

          yq eval -i ".image.repository = \"${FULL_IMAGE_WITH_TAG}\"" "$FILE_PATH"

          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"

          git add "$FILE_PATH"
          git commit -m "chore: update image.repository to ${FULL_IMAGE_WITH_TAG}" || echo "No changes to commit"
          git push origin main


  argocd_sync:
    runs-on: 
      - self-hosted
      - ${{ inputs.RUNNER_LABEL }}
    needs: [docker_build, helm_update]
    # env:
    #   CI_ENVIRONMENT_NAME: ${{ inputs.CI_ENVIRONMENT_NAME }}
    #   REPO_SLUG: ${{ needs.docker_build.outputs.slug }}
    #   ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
    #   ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
    #   ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
    env:
      CI_ENVIRONMENT_NAME: ${{ inputs.CI_ENVIRONMENT_NAME }}
      REPO_SLUG: ${{ needs.docker_build.outputs.slug }}

    steps:
      - name: Install ArgoCD CLI
        run: |
          # Create a temporary directory for downloads
          TEMP_DIR=$(mktemp -d)
          cd $TEMP_DIR
          
          echo "Installing ArgoCD CLI..."
          
          # Try curl installation first
          echo "Attempting to download ArgoCD CLI using curl..."
          if curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64; then
            echo "Download successful using curl"
          else
            echo "Curl download failed, trying wget..."
            if wget -q https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 -O argocd; then
              echo "Download successful using wget"
            else
              echo "Both curl and wget failed. Aborting."
              exit 1
            fi
          fi
          
          # Make executable and move to bin directory
          chmod +x argocd
          echo "Moving ArgoCD CLI to /usr/local/bin with sudo..."
          sudo mv argocd /usr/local/bin/
          
          # Verify installation
          if argocd version --client 2>&1 | grep -q "argocd"; then
            echo "ArgoCD CLI installed successfully"
          else
            echo "ArgoCD CLI installation verification failed"
            exit 1
          fi

      - name: Login to ArgoCD
        run: argocd login argocd.stg.wayabank.ng --username admin --password sb722vhvhq8RQKpB --insecure --grpc-web

      - name: Check if ArgoCD app exists
        run: |
          echo "${REPO_SLUG}"
          TARGET_APP="${REPO_SLUG}-${CI_ENVIRONMENT_NAME}"
          echo "Checking ArgoCD app: $TARGET_APP"
          if ! argocd app get "$TARGET_APP" > /dev/null 2>&1; then
            echo "ERROR: ArgoCD app $TARGET_APP does not exist"
            exit 1
          fi

      - name: Sync ArgoCD app
        run: |
          TARGET_APP="${REPO_SLUG}-${CI_ENVIRONMENT_NAME}"
          echo "Syncing ArgoCD app: $TARGET_APP"
          
          if argocd app sync "$TARGET_APP" --timeout 300 --prune; then
            echo "Application $TARGET_APP successfully synced!"
          else
            echo "Failed to sync application $TARGET_APP"
            exit 1
          fi
